@page "/"

@inject IJSRuntime jsRuntime
<button onclick="@(formInput())" id="testButton" style="display:none;"></button>
<p>Click here for random results: </p>
<button class="btn btn-primary" @onclick="randNum">Button</button>

<div class="row">
    <div class="col-sm-12 col-md-8 col-lg-4">
        <div class="form-group">
            <label for="percentage">Or enter a value for the stage and grade of periodontitis</label>
            <input class="form-control" type="number" min="0" max="100" @bind="stage" @bind:event="oninput"/>
            <input class="form-control" type="number" min="0" max="100" @bind="grade" @bind:event="oninput"/>
            <small class="form-text text-muted">Enter a value between 0 and 100 to update the gauge.</small>
        </div>
    </div>
</div>
<p>@stage</p>
<p>@grade</p>
<div id="chart"></div>


@code {
    int stage = 25, grade = 50;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeVoidAsync("generateGauge", stage, grade);
            this.StateHasChanged();
        }
    }
    public void test() {
        
    }
    public async Task formInput(){
        await jsRuntime.InvokeVoidAsync("updateGauge", stage, grade);
    }

    public async Task randNum()
    {
        stage = new Random().Next(0, 100);
        grade = new Random().Next(0, 100);
        await jsRuntime.InvokeVoidAsync("updateGauge", stage, grade);
    }

}
